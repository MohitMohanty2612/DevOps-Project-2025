version: 0.2

phases:
  install:
    commands:
      # No 'cd' command needed here, as the React application is
      # directly in the root of the GitHub repository.

      - echo "Listing repository contents for debugging (for reference):"
      - ls -R # This command lists all files and directories recursively

      # --- Node.js Installation for CodeBuild (more robust) ---
      # Check if nvm is available, otherwise download and install Node.js directly.
      # CodeBuild images often have nvm pre-installed.
      - |
        if command -v nvm &> /dev/null; then
          echo "nvm found. Installing Node.js 20..."
          nvm install 20
          nvm use 20
        else
          echo "nvm not found. Attempting direct Node.js 20 installation for Amazon Linux..."
          # For Amazon Linux 2 or similar, use yum or direct tarball download
          # This assumes a yum-based system, common in CodeBuild default images
          yum install -y nodejs npm --enablerepo=epel || true # Try installing via yum, ignore if already installed or not yum-based
          # If yum fails, try direct download (more universal but complex)
          # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
          # export NVM_DIR="$HOME/.nvm"
          # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          # nvm install 20
          # nvm use 20
        fi

      - node -v # Verify Node.js version
      - npm -v # Verify npm version

      - echo "Installing Node.js dependencies..."
      - npm install

  build:
    commands:
      - echo "Building the React application using npx vite build..."
      # CORRECTED: Using 'npx vite build' for Vite-based React projects.
      # This command will build your application and place the output
      # into the 'dist' directory by default.
      - npx vite build

artifacts:
  files:
    - '**/*' # Include all files in the build output
  # CORRECTED: Vite typically outputs compiled assets to the 'dist' directory.
  base-directory: dist
